# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chat.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\nchat.proto\x12\x04\x63hat\"\x1d\n\rServerRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1b\n\x0bSendingText\x12\x0c\n\x04text\x18\x01 \x01(\t\"\x10\n\x0eGetTextRequest\"\x1e\n\x0bServerReply\x12\x0f\n\x07message\x18\x01 \x01(\t\" \n\rReceivingText\x12\x0f\n\x07message\x18\x01 \x01(\t\",\n\x0cGetTextReply\x12\x0f\n\x07message\x18\x01 \x01(\t\x12\x0b\n\x03num\x18\x02 \x01(\x05\x32\xe7\x01\n\x07\x43hatter\x12\x36\n\nJoinServer\x12\x13.chat.ServerRequest\x1a\x11.chat.ServerReply\"\x00\x12\x37\n\x0bLeaveServer\x12\x13.chat.ServerRequest\x1a\x11.chat.ServerReply\"\x00\x12\x34\n\x08SendText\x12\x11.chat.SendingText\x1a\x13.chat.ReceivingText\"\x00\x12\x35\n\x07GetText\x12\x14.chat.GetTextRequest\x1a\x12.chat.GetTextReply\"\x00\x42)\n\x15io.grpc.examples.chatB\tChatProtoP\x01\xa2\x02\x02\x43Hb\x06proto3')



_SERVERREQUEST = DESCRIPTOR.message_types_by_name['ServerRequest']
_SENDINGTEXT = DESCRIPTOR.message_types_by_name['SendingText']
_GETTEXTREQUEST = DESCRIPTOR.message_types_by_name['GetTextRequest']
_SERVERREPLY = DESCRIPTOR.message_types_by_name['ServerReply']
_RECEIVINGTEXT = DESCRIPTOR.message_types_by_name['ReceivingText']
_GETTEXTREPLY = DESCRIPTOR.message_types_by_name['GetTextReply']
ServerRequest = _reflection.GeneratedProtocolMessageType('ServerRequest', (_message.Message,), {
  'DESCRIPTOR' : _SERVERREQUEST,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.ServerRequest)
  })
_sym_db.RegisterMessage(ServerRequest)

SendingText = _reflection.GeneratedProtocolMessageType('SendingText', (_message.Message,), {
  'DESCRIPTOR' : _SENDINGTEXT,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.SendingText)
  })
_sym_db.RegisterMessage(SendingText)

GetTextRequest = _reflection.GeneratedProtocolMessageType('GetTextRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETTEXTREQUEST,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.GetTextRequest)
  })
_sym_db.RegisterMessage(GetTextRequest)

ServerReply = _reflection.GeneratedProtocolMessageType('ServerReply', (_message.Message,), {
  'DESCRIPTOR' : _SERVERREPLY,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.ServerReply)
  })
_sym_db.RegisterMessage(ServerReply)

ReceivingText = _reflection.GeneratedProtocolMessageType('ReceivingText', (_message.Message,), {
  'DESCRIPTOR' : _RECEIVINGTEXT,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.ReceivingText)
  })
_sym_db.RegisterMessage(ReceivingText)

GetTextReply = _reflection.GeneratedProtocolMessageType('GetTextReply', (_message.Message,), {
  'DESCRIPTOR' : _GETTEXTREPLY,
  '__module__' : 'chat_pb2'
  # @@protoc_insertion_point(class_scope:chat.GetTextReply)
  })
_sym_db.RegisterMessage(GetTextReply)

_CHATTER = DESCRIPTOR.services_by_name['Chatter']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\025io.grpc.examples.chatB\tChatProtoP\001\242\002\002CH'
  _SERVERREQUEST._serialized_start=20
  _SERVERREQUEST._serialized_end=49
  _SENDINGTEXT._serialized_start=51
  _SENDINGTEXT._serialized_end=78
  _GETTEXTREQUEST._serialized_start=80
  _GETTEXTREQUEST._serialized_end=96
  _SERVERREPLY._serialized_start=98
  _SERVERREPLY._serialized_end=128
  _RECEIVINGTEXT._serialized_start=130
  _RECEIVINGTEXT._serialized_end=162
  _GETTEXTREPLY._serialized_start=164
  _GETTEXTREPLY._serialized_end=208
  _CHATTER._serialized_start=211
  _CHATTER._serialized_end=442
# @@protoc_insertion_point(module_scope)
